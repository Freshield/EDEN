/*
 * lib_pwm_m16.h
 *
 * Created: 2013/04/07 11:41:48
 * Edited：	2015/09/24
 *  Author: Narcissus
 */ 

//***************注意芯片的熔丝位设置，新片的熔丝位为内部时钟

#ifndef LIB_PWM_M16_H_
#define LIB_PWM_M16_H_
//*********************有延时 应包含延时程序
#ifndef LIB_DELAY_H_
# error "not define LIB_DELAY_H_ ; LIB_LED_H_ can not work"
#endif


//******************M16的pwm程序********************//

//***********************TIMER0的pwm*****************//
//定义输出口 M16的TIMER0的输出口为OC0（PB3）//
#define PWM_TIMER0_PORT PORTB
#define PWM_TIMER0_DDR DDRB
#define PWM_TIMER0_PIN PINB
#define PWM_TIMER0_OUT 3
#define PWM_TIMER0_T0 0

//***********************TIMER1的pwm*****************//
//定义输出口 M16的TIMER1的输出口为OC1A（PD5）和OC1B(PD4)//
#define PWM_TIMER1_PORT PORTD
#define PWM_TIMER1_DDR DDRD
#define PWM_TIMER1_PIN PIND
#define PWM_TIMER1_OUTA PD5
#define PWM_TIMER1_OUTB PD4

#define PWM_TIMER1_CATCH PD6


//***********************TIMER2的pwm*****************//
//定义输出口 M16的TIMER2的输出口为OC0（PD7）//
#define PWM_TIMER2_PORT PORTD
#define PWM_TIMER2_DDR DDRD
#define PWM_TIMER2_PIN PIND
#define PWM_TIMER2_OUT 7


#define uchar unsigned char
#define uint unsigned int
#define F_CPU 7372800//7.3728晶振

int FN_TIMER1 = 1;//*****分频大小
//int TIMER1_FASTPWMA_DUTY = 255;//****为TIMER1的快速PWM模式的分辨率

//****************************************************************************************************************************************
//****************************************************************************************************************************************
//****************************************************************************************************************************************
//****************************************************************************************************************************************
//**********************TIMER0 NORMAL PWM 模式初始化*******************//
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//***************注意*************************************
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//*****************F_CPU/1024 * compare_time 不大于255******
//**************一般compare_time取0.01 在中断中累加或者用TIMER1
//**************************************************************

void TIMER0_NORMAL_PWM_INIT()
{
	//端口初始化
	//PWM_TIMER0_DDR |= (1 << PWM_TIMER0_OUT); 
	//计数器初始化
	TCNT0=0x00;
	//OCR0 = 0X01;//***避免与bottom相同时候特殊情况
	//中断初始化
	TIMSK |= 1 << TOIE0;
	//PWM模式设置
	TCCR0 |= (1 << CS00) | (1 << CS02);//设置为普通PWM；匹配时将取反；1024分频
	
	
}
//********************TIMER0 NORMAL PWM 模式时间设定*********************//
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//***************注意*************************************
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//*****************F_CPU/1024 * compare_time 不大于255******
//**************一般compare_time取0.01 在中断中累加或者用TIMER1
//**************************************************************


void TIMER0_NORMAL_PWM_TCNT0_set(float compare_time)
{
	TCNT0 = 256 - F_CPU/1024 * compare_time;
	
}

//********************TIMER0 NORMAL PWM 模式查询方式设定（中断可参考）*********************//
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//***************注意*************************************
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//*****************F_CPU/1024 * compare_time 不大于255******
//**************一般compare_time取0.01 在中断中累加或者用TIMER1
//**************************************************************
void TIMER0_NORMAL_PWM_SEARCH()
{
	while(!(TIFR & ~(1 << TOV0)));//***********等待置位
	
	TIFR |= 1 << TOV0;//***************写1清零
	
	
	
}
//****************记得要重装时间

////////////////////////////////////////////////////////////////////////////////////////////

//**********************TIMER0 CATCH PWM 模式初始化*******************//
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//**************************************************************

void TIMER0_CATCH_PWM_INIT()
{
	//端口初始化
	PWM_TIMER0_DDR &= ~(1 << PWM_TIMER0_T0); 
	PWM_TIMER0_PORT |= 1 << PWM_TIMER0_T0;
	//计数器初始化
	TCNT0 = 255;
	//OCR0 = 0X01;//***避免与bottom相同时候特殊情况
	//中断初始化
	TIMSK |= 1 << TICIE1;
	//快速PWM模式设置
	TCCR0 |=  (1 << CS01) | (1 << CS02);//设置为捕获PWM；
	
	
}

//**************记得重装TCNTO

///////////////////////////////////////////////////////////////////////////////////////


//**********************FAST PWM OCR0模式初始化*******************//
void TIMER0_FASTPWM_OCR0_init()
{
	//端口初始化
	PWM_TIMER0_DDR|=(1<<PWM_TIMER0_OUT); 
	//计数器初始化
	TCNT0=0x00;OCR0 = 0X01;//***避免与bottom相同时候特殊情况
	//中断初始化
	TIMSK |= (1<<OCIE0)|(1<<TOIE0);
	//快速PWM模式设置
	TCCR0 |= (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << COM00) | (1 << CS01);//设置为快速PWM；与OCR0匹配时将清零；8分频
	
	
}
//********************FAST PWM ICR0模式时间设定*********************//
void TIMER0_FASTPWMA_OCR0_set(float compare_time)
{
	OCR0=F_CPU/8*compare_time;
	
}


//****************************************************************************************************************************************
//****************************************************************************************************************************************
//****************************************************************************************************************************************
//****************************************************************************************************************************************
//**************************************************************
//*********************TIMER1启动流程
//******一，先初始化TIMER1的端口，设定模式等
//******二，然后在主程序中加入ISR(TIMER1_CAPT_vect,TIMER1_COMPA_vect,)来写中断程序,别忘了重装TCNT1
//*******************************************************************
//******注意：应在库前引用delay的库，在主程序内sei();开中断
//*******************************************************************

void TIMER1_WRITE_TCNT1(unsigned int i)
{
	uchar sreg;
	
	sreg = SREG;
	
	cli();
	
	TCNT1 = i;
	
	SREG = sreg;
	
}

unsigned int TIMER1_READ_TCNT1()
{
	uchar sreg;
	
	unsigned int i;
	
	sreg = SREG;
	
	cli();
	
	i = TCNT1;
	
	SREG = sreg;
	
	return i;
	
}

//**********************TIMER1 NORMAL PWM 模式初始化*******************//
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//***************注意*************************************
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//*****************F_CPU/1024 * compare_time 不大于65535******
//***************别忘了重装TCNT1***************此模式下ocx接口无效 开中断
//***************注意芯片的熔丝位设置，新片的熔丝位为内部时钟
void TIMER1_NORMAL_PWM_INIT()                                                                                             
{		
											//!
	//计数器初始化                                                                                    
	TCNT1 = 0X00;                                                                                     
	//中断初始化                                                                                    
	TIMSK |= 1<<TOIE1;                                                                                
	//普通PWM模式设置                                                                                         
	TCCR1B |= (1<<CS10)|(1<<CS12);FN_TIMER1 = 1024;//1024分频                                                       
	//TCCR1B |= 1 << CS10;FN_TIMER1 = 1;//**********1分频
	
}
//********************TIMER1 NORMAL PWM 模式时间设定*********************//
void TIMER1_NORMAL_PWM_set(float compare_time)//****单位为秒
{
	TCNT1 = 65536 - F_CPU/FN_TIMER1*compare_time;
	
}
//毫秒的初始化和设置时间
//*****************F_CPU/256 * compare_time 不大于65535******
//***************别忘了重装TCNT1***************此模式下ocx接口无效
//***************注意芯片的熔丝位设置，新片的熔丝位为内部时钟
void TIMER1_NORMAL_PWM_MS_INIT()                                                                                             
{		
											//!
	                                                                             
	//中断初始化                                                                                    
	TIMSK |= 1<<TOIE1;                                                                                
	//普通PWM模式设置                                                                                         
	TCCR1B |= (1<<CS12);FN_TIMER1 = 256;//256分频                                                       
	//TCCR1B |= 1 << CS10;FN_TIMER1 = 1;//**********1分频
	//计数器初始化                                                                                    
	TCNT1 = 0X00;        
}
//打开定时器
void TIMER1_NORMAL_PWM_MS_OPEN()
{
	//!
	//中断初始化
	TIMSK |= 1<<TOIE1;
	
}
//关闭定时器
void TIMER1_NORMAL_PWM_MS_CLOSE()                                                                                             
{		
											//!
	//计数器初始化                                                                                    
	TCNT1 = 0X00;                                                                                     
	//中断初始化                                                                                    
	TIMSK &= ~(1<<TOIE1);               
	
}
//********************TIMER1 NORMAL PWM 毫秒模式时间设定*********************//
void TIMER1_NORMAL_PWM_MS_set(float ms_time)//****单位为毫秒
{
	TCNT1 = 65536 - F_CPU*ms_time/1000/FN_TIMER1;
	
}
//********************TIMER1 NORMAL PWM 毫秒模式 737 256分频时间设定*********************//
void TIMER1_NORMAL_PWM_737MS1_set(float ms_time)//****单位为毫秒
{
	TCNT1 = 65536 - 28.8*ms_time;
	
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

//**********************CTC OCR1A模式初始化*******************//
void TIMER1_CTC_OCR1A_INIT()
{
	//端口初始化
	PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
	
	//中断初始化
	TIMSK |= (1<<OCIE1A);
	//比较匹配取反
	TCCR1A |= (1<<COM1A0);
	//CTC OCR1A模式设置
	TCCR1B |= (1<<WGM12)|(1<<CS12);FN_TIMER1 = 256;//TOP为OCR1A的值 256分频
	//计数器初始化
	TCNT1 = 0x00;
}
//********************TIMER1 CTC PWM 模式时间设定*********************//
void TIMER1_CTC_OCR1A_set(float compare_time)//****单位为秒
{
	OCR1A = F_CPU/FN_TIMER1*compare_time;
	
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//**********************FAST PWM ICR1模式初始化*******************//
void TIMER1_FASTPWMA_ICR1_init()
{
	//端口初始化，要把想相应的端口设为输出并值为零
	PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
	//计数器初始化
	TCNT1 = 0x00;
	//中断初始化
	TIMSK |= (1<<OCIE1A)|(1<<TOIE1);
	//快速PWM模式设置
	TCCR1A |= (1<<COM1A1)|(1<<WGM11);//比较匹配清零 TOP置位 
	TCCR1B |= (1<<WGM12)|(1<<WGM13)|(1<<CS12);FN_TIMER1 = 256;//PWM模式14 TOP为ICR1的值 256分频
	
	
}
//********************FAST PWM ICR1模式时间设定*********************//单位为秒
void TIMER1_FASTPWMA_ICR1_time_set(float compare_time,float top_time)//OCR1A为匹配时间 ICR1为总体时间 别写成一样的。。。
{
	OCR1A=F_CPU/FN_TIMER1*compare_time;
	
	ICR1=F_CPU/FN_TIMER1*top_time;
}

//*******************FAST PWM ICR1 模式占空比设定*******************//top值为分辨率
void TIMER1_FASTPWMA_ICR1_dutycircle_set(int compare_duty,int top_duty)
{
	OCR1A = compare_duty;
	
	ICR1 = top_duty;
  
}
//*******************FAST PWM ICR1 模式占空比增量时间设定*******************//top值固定 更改占空比 即输出功率
//******************ICR1决定的是整体的一次周期的时间 也就是为蹭量一次的时间 totaltime为一次呼吸！！半次！！的总体时间
//******************duty为分辨率 就是增量的次数 也就是细腻度
void TIMER1_FASTPWMA_ICR1_dutycircle_add(float total_time,float DUTY)//***完成一次由暗到亮的时间
{
	ICR1 = (F_CPU/FN_TIMER1*total_time )/ DUTY;
	
	OCR1A = 0X0001;
	
}
//*************************LED呼吸灯的样例 放在溢出中断中
	/*int model = 0;
	ISR(TIMER1_OVF_vect)
	{LED_PORT = 0X00;
	switch (model)
	{case 0:	OCR1A ++;
		if (OCR1A == ICR1 - 3)
		{model = 1;}
		break;
		case 1:	OCR1A --;
		if (OCR1A == 0x0001)
		{model = 0;}
		break;
	}}*/

//************************LED正弦波的样例**************************************
/*uchar auc_SinParam[128] = {
	128,134,140,147,153,159,165,171,177,182,188,193,198,204,208,213,
	218,222,226,230,233,237,240,242,245,247,249,251,252,253,254,254,
	254,254,253,252,251,250,248,246,244,241,238,235,232,228,224,220,
	215,211,206,201,196,191,185,179,174,168,162,156,150,144,137,131,
	125,119,112,106,100,94,88,82,77,71,65,60,55,50,45,41,
	36,32,28,24,21,18,15,12,10,8,6,5,4,3,2,2,
	2,2,3,4,5,7,9,11,14,16,19,23,26,30,34,38,
43,48,52,57,63,68,74,79,85,91,97,103,109,116,122,128};  // 128点正弦波样本值
*/
//*************放在中断的
/*ISR(TIMER1_OVF_vect)
{OCR1A = auc_SinParam[pointer];  // 取样点指针到比较匹配寄存器
	pointer ++;      // 新样点指针
	if (pointer == 128)
	{pointer = 0;}
	}
*/
//**********************************************************************************************************************************
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

//***********************************************************************************底下未订正***********************************************
//**********************十位相位修正PWM模式初始化*******************//
void TIMER1_PHASE_CORRECTION_10_init()
{
	//端口初始化
	PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
	//计数器初始化
	TCNT1 = 0x00;OCR1A = 0X00;
	//中断初始化
	TIMSK |= (1<<OCIE1A)|(1<<TOIE1);
	//快速PWM模式设置
	TCCR1A |= (1<<COM1A1)|(1<<WGM11)|(1<<WGM10);//比较匹配清零 TOP置位
	TCCR1B |= (1<<CS11);FN_TIMER1 = 8;//TOP为ICR1的值 8分频
	
	
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

//**********************TIMER1 CATCH PWM 模式初始化*******************//
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//**************************************************************

void TIMER1_CATCH_PWM_INIT()
{
	//端口初始化
	PWM_TIMER1_DDR &= ~(1 << PWM_TIMER1_CATCH); 
	PWM_TIMER1_PORT |= 1 << PWM_TIMER1_CATCH;
	//计数器初始化
	TCNT0 = 0X00;
	//OCR0 = 0X01;//***避免与bottom相同时候特殊情况
	//中断初始化
	TIMSK |= 1 << TICIE1;
	//快速PWM模式设置
	//TCCR0 |=  (1 << CS01) | (1 << CS02);//设置为捕获PWM；
	TCCR1B |= (1 << ICNC1) | (1 << ICES1) | (1 << CS10);FN_TIMER1 = 1;//********频率1分频
	
}

//**************

//****************************************************************************************************************************************
//****************************************************************************************************************************************
//****************************************************************************************************************************************
//****************************************************************************************************************************************
//****************************************************************************************************************************************

//**********************TIMER2 NORMAL PWM 模式初始化*******************//
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//***************注意*************************************
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//*****************F_CPU/1024 * compare_time 不大于255******
//***************别忘了重装TCNT1***************
//**************************************************************

void TIMER2_NORMAL_PWM_INIT()
{
	//端口初始化
	//PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
	//计数器初始化
	TCNT2 = 0x00;
	//中断初始化
	TIMSK |= 1<<TOIE2;
	//普通PWM模式设置
	//TCCR2 |= 1<<COM20;//比较匹配取反
	TCCR2 |= (1 << CS22) | (1 << CS21) | (1 << CS20);//1024分频
	
	
}
//********************TIMER2 NORMAL PWM 模式时间设定*********************//
void TIMER2_NORMAL_PWM_set(float compare_time)
{
	TCNT2 = 256 - F_CPU/1024*compare_time;
	
}

//****************************************************************************************************************************************
//****************************************************************************************************************************************
//****************************************************************************************************************************************

#endif /* LIB_PWM_M16_H_ */